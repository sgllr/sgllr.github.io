[{"title":"ML_final_project","url":"/2020/12/21/ML-final-project/","content":"<h1 id=\"前期准备阶段\"><a href=\"#前期准备阶段\" class=\"headerlink\" title=\"前期准备阶段\"></a>前期准备阶段</h1><h4 id=\"多通道卷积与池化\"><a href=\"#多通道卷积与池化\" class=\"headerlink\" title=\"多通道卷积与池化\"></a>多通道卷积与池化</h4><p>在处理多通道输入数据时，<strong>池化层对每个输入通道分别池化，而不是像卷积层那样将各通道的输入按通道相加</strong>。</p>\n<h4 id=\"VGGNet的结构\"><a href=\"#VGGNet的结构\" class=\"headerlink\" title=\"VGGNet的结构\"></a>VGGNet的结构</h4><p><img src=\"https://res.cloudinary.com/sgllr/image/upload/v1608514052/vgg_cs7xlz.jpg\" alt=\"vgg\" style=\"zoom:50%;\" /></p>\n<ul>\n<li>VGGNet成功地构筑了16~19层深度的卷积神经网络</li>\n<li>VGGNet网络结构很规整，全部使用$3\\times 3$的小型卷积核以及$2\\times 2$的最大池化层（C有使用$1\\times 1$卷积核）<ul>\n<li>$3\\times 3$卷积核：stride = 1, padding = 1 (padding  = same convolution)</li>\n<li>$2\\times 2$最大池化层：stride = 2</li>\n</ul>\n</li>\n<li>每次池化后，图像高和宽均缩小一半（$2\\times 2\\ pooling$），初始为$224\\times 224$，经过5个卷积块（每层最后都是最大池化层）后图像（特征）大小变为$7\\times 7$</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">层关系如下：</span><br><span class=\"line\">VGG-<span class=\"number\">16</span>, VGG-<span class=\"number\">19</span>, 下面介绍的是VGG-<span class=\"number\">16</span>的层次结构</span><br><span class=\"line\">INPUT：<span class=\"number\">224</span>*<span class=\"number\">224</span>*<span class=\"number\">3</span></span><br><span class=\"line\">CONV3-<span class=\"number\">64</span>：<span class=\"number\">224</span>*<span class=\"number\">224</span>*<span class=\"number\">64</span></span><br><span class=\"line\">CONV3-<span class=\"number\">64</span>：<span class=\"number\">224</span>*<span class=\"number\">224</span>*<span class=\"number\">64</span></span><br><span class=\"line\">POOL2：<span class=\"number\">112</span>*<span class=\"number\">112</span>*<span class=\"number\">64</span></span><br><span class=\"line\">CONV3-<span class=\"number\">128</span>：<span class=\"number\">112</span>*<span class=\"number\">112</span>*<span class=\"number\">128</span></span><br><span class=\"line\">CONV3-<span class=\"number\">128</span>：<span class=\"number\">112</span>*<span class=\"number\">112</span>*<span class=\"number\">128</span></span><br><span class=\"line\">POOL2：<span class=\"number\">56</span>*<span class=\"number\">56</span>*<span class=\"number\">128</span></span><br><span class=\"line\">CONV3-<span class=\"number\">256</span>：<span class=\"number\">56</span>*<span class=\"number\">56</span>*<span class=\"number\">256</span></span><br><span class=\"line\">CONV3-<span class=\"number\">256</span>：<span class=\"number\">56</span>*<span class=\"number\">56</span>*<span class=\"number\">256</span></span><br><span class=\"line\">CONV3-<span class=\"number\">256</span>：<span class=\"number\">56</span>*<span class=\"number\">56</span>*<span class=\"number\">256</span></span><br><span class=\"line\">POOL2：<span class=\"number\">28</span>*<span class=\"number\">28</span>*<span class=\"number\">256</span> </span><br><span class=\"line\">CONV3-<span class=\"number\">512</span>：<span class=\"number\">28</span>*<span class=\"number\">28</span>*<span class=\"number\">512</span> </span><br><span class=\"line\">CONV3-<span class=\"number\">512</span>：<span class=\"number\">28</span>*<span class=\"number\">28</span>*<span class=\"number\">512</span> </span><br><span class=\"line\">CONV3-<span class=\"number\">512</span>：<span class=\"number\">28</span>*<span class=\"number\">28</span>*<span class=\"number\">512</span> </span><br><span class=\"line\">POOL2：<span class=\"number\">14</span>*<span class=\"number\">14</span>*<span class=\"number\">512</span></span><br><span class=\"line\">CONV3-<span class=\"number\">512</span>：<span class=\"number\">14</span>*<span class=\"number\">14</span>*<span class=\"number\">512</span> </span><br><span class=\"line\">CONV3-<span class=\"number\">512</span>：<span class=\"number\">14</span>*<span class=\"number\">14</span>*<span class=\"number\">512</span> </span><br><span class=\"line\">CONV3-<span class=\"number\">512</span>：<span class=\"number\">14</span>*<span class=\"number\">14</span>*<span class=\"number\">512</span></span><br><span class=\"line\">POOL2：<span class=\"number\">7</span>*<span class=\"number\">7</span>*<span class=\"number\">512</span>   </span><br><span class=\"line\">FC：<span class=\"number\">1</span>*<span class=\"number\">1</span>*<span class=\"number\">4096</span></span><br><span class=\"line\">FC：<span class=\"number\">1</span>*<span class=\"number\">1</span>*<span class=\"number\">4096</span></span><br><span class=\"line\">FC：<span class=\"number\">1</span>*<span class=\"number\">1</span>*<span class=\"number\">1000</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">cfgs = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;A&#x27;</span>: [<span class=\"number\">64</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">128</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">256</span>, <span class=\"number\">256</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">512</span>, <span class=\"number\">512</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">512</span>, <span class=\"number\">512</span>, <span class=\"string\">&#x27;M&#x27;</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;B&#x27;</span>: [<span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">128</span>, <span class=\"number\">128</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">256</span>, <span class=\"number\">256</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">512</span>, <span class=\"number\">512</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">512</span>, <span class=\"number\">512</span>, <span class=\"string\">&#x27;M&#x27;</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;D&#x27;</span>: [<span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">128</span>, <span class=\"number\">128</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">256</span>, <span class=\"number\">256</span>, <span class=\"number\">256</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">512</span>, <span class=\"number\">512</span>, <span class=\"number\">512</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">512</span>, <span class=\"number\">512</span>, <span class=\"number\">512</span>, <span class=\"string\">&#x27;M&#x27;</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;E&#x27;</span>: [<span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">128</span>, <span class=\"number\">128</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">256</span>, <span class=\"number\">256</span>, <span class=\"number\">256</span>, <span class=\"number\">256</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">512</span>, <span class=\"number\">512</span>, <span class=\"number\">512</span>, <span class=\"number\">512</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">512</span>, <span class=\"number\">512</span>, <span class=\"number\">512</span>, <span class=\"number\">512</span>, <span class=\"string\">&#x27;M&#x27;</span>],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_layers</span>(<span class=\"params\">cfg, batch_norm=<span class=\"literal\">False</span></span>):</span></span><br><span class=\"line\">    layers = []</span><br><span class=\"line\">    in_channels = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> cfg:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> v == <span class=\"string\">&#x27;M&#x27;</span>:</span><br><span class=\"line\">            layers += [nn.MaxPool2d(kernel_size=<span class=\"number\">2</span>, stride=<span class=\"number\">2</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            conv2d = nn.Conv2d(in_channels, v, kernel_size=<span class=\"number\">3</span>, padding=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> batch_norm:</span><br><span class=\"line\">                layers += [conv2d, nn.BatchNorm2d(v), nn.ReLU(inplace=<span class=\"literal\">True</span>)]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                layers += [conv2d, nn.ReLU(inplace=<span class=\"literal\">True</span>)]</span><br><span class=\"line\">            in_channels = v</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nn.Sequential(*layers)</span><br></pre></td></tr></table></figure>\n<p><strong>参考</strong></p>\n<p><a href=\"https://blog.csdn.net/u014453898/article/details/101024805\">pytorch中VGG网络的源码解读</a></p>\n<p><a href=\"https://github.com/pytorch/vision/blob/master/torchvision/models/vgg.py\">vgg.py源码</a></p>\n<h4 id=\"Pytorch-Reproducibility\"><a href=\"#Pytorch-Reproducibility\" class=\"headerlink\" title=\"Pytorch Reproducibility\"></a>Pytorch Reproducibility</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_random_seed</span>(<span class=\"params\">seed_value, use_cuda=<span class=\"literal\">True</span></span>):</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    np.random.seed(seed_value) <span class=\"comment\"># cpu vars</span></span><br><span class=\"line\">    torch.manual_seed(seed_value) <span class=\"comment\"># cpu  vars</span></span><br><span class=\"line\">    random.seed(seed_value) <span class=\"comment\"># Python</span></span><br><span class=\"line\">    os.environ[<span class=\"string\">&#x27;PYTHONHASHSEED&#x27;</span>] = <span class=\"built_in\">str</span>(seed_value) <span class=\"comment\"># Python hash buildin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> use_cuda: </span><br><span class=\"line\">        torch.cuda.manual_seed(seed_value)</span><br><span class=\"line\">        torch.cuda.manual_seed_all(seed_value) <span class=\"comment\"># gpu vars</span></span><br><span class=\"line\">        torch.backends.cudnn.deterministic = <span class=\"literal\">True</span>  <span class=\"comment\">#needed</span></span><br><span class=\"line\">        torch.backends.cudnn.benchmark = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数据的归一化、中心化与标准化\"><a href=\"#数据的归一化、中心化与标准化\" class=\"headerlink\" title=\"数据的归一化、中心化与标准化\"></a>数据的归一化、中心化与标准化</h4><p><a href=\"https://zhuanlan.zhihu.com/p/61816599\">数据的归一化、中心化与标准化</a></p>\n<h4 id=\"Pytorch查看模型的-summary\"><a href=\"#Pytorch查看模型的-summary\" class=\"headerlink\" title=\"Pytorch查看模型的 summary\"></a>Pytorch查看模型的 summary</h4><ul>\n<li><p>安装<code>torchsummary</code></p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install torchsummary</span><br></pre></td></tr></table></figure></li>\n<li><p>使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torchsummary <span class=\"keyword\">import</span> summary</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">summary(model, input_size=(channels, H, W))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"关于pytorch训练与验证\"><a href=\"#关于pytorch训练与验证\" class=\"headerlink\" title=\"关于pytorch训练与验证\"></a>关于pytorch训练与验证</h4><p><a href=\"https://github.com/sgllr/ImageClassification-PyTorch/blob/master/level2/train_customData.py\">参考代码1</a></p>\n<p><a href=\"https://pytorch.org/tutorials/beginner/finetuning_torchvision_models_tutorial.html#model-training-and-validation-code\">参考代码2</a></p>\n<p><a href=\"https://github.com/sgllr/livelossplot/blob/master/examples/pytorch.ipynb\">livelossplot-参考nootbook(可视化 loss曲线)</a></p>\n<p><a href=\"http://fancyerii.github.io/books/pytorch/#%E5%9C%A8%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE%E9%9B%86%E4%B8%8A%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95\">训练模型</a></p>\n","categories":["机器学习","深度学习"],"tags":["机器学习, 卷积网络, VGG, Pytorch, 图像分类"]},{"title":"花卉分类——数据的准备","url":"/2020/12/21/data_preparation/","content":"<p>介绍数据的预处理和构建便于<code>Pytorch</code>程序使用的训练集和测试集。<!---more---></p>\n<p>原数据集在<code>flowers</code>文件夹中，其下包含<code>5</code>个子文件夹，分别存储着<code>5</code>种不同的花卉，在使用<code>cv2.resize</code>将所有图片统一为<code>3*224*224</code>时，发现有3张图片读取有问题，使用<code>try...except...</code>语句定位到具体的文件名，发现问题为：</p>\n<ul>\n<li><p>文件名中含有中文</p>\n<p>修改为符合命名要求的文件名</p>\n</li>\n<li><p>文件拓展有问题</p>\n<p>本来是<code>*.gif</code>扩展，人为地改为了<code>*.jpg</code>，能发现这个多亏了<code>PyCharm</code>，在<code>PyCharm</code>中打开该文件时，<code>PyCharm</code>显示其为<code>*.gif</code>文件，后通过在线图片转换器，将其转换为<code>*.jpg</code>文件，问题解决。</p>\n</li>\n</ul>\n<p>为构建训练集和测试集，将原来的<code>flowers</code>文件夹中所有的<code>5</code>类图片分别按一定比例分成训练集文件夹<code>train_data</code>和测试集文件夹<code>test_data</code>（这两个文件夹中依然包含<code>5</code>个文件夹，分别代表<code>5</code>种花卉）。使用<code>sk-learn</code>库中<code>train_test_split</code>函数来将原数据集分为训练集和测试集。</p>\n<p>完整代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入相关的库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">X = []</span><br><span class=\"line\">y = []</span><br><span class=\"line\">flower_types = [<span class=\"string\">&quot;daisy&quot;</span>, <span class=\"string\">&quot;dandelion&quot;</span>, <span class=\"string\">&quot;rose&quot;</span>, <span class=\"string\">&quot;sunflower&quot;</span>, <span class=\"string\">&quot;tulip&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要提前建立这两个文件夹，并在其下建立5个子文件夹，用于保存不同类别的花卉</span></span><br><span class=\"line\">train_dir = <span class=\"string\">&#x27;./train_data/&#x27;</span></span><br><span class=\"line\">test_dir = <span class=\"string\">&#x27;./test_data/&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将所有花卉数据读取出来</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_data</span>():</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> flower_type <span class=\"keyword\">in</span> flower_types:</span><br><span class=\"line\"></span><br><span class=\"line\">        folder_path = <span class=\"string\">&quot;./flowers/&quot;</span> + flower_type <span class=\"comment\"># 注意路径正确</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> img_name <span class=\"keyword\">in</span> tqdm(os.listdir(folder_path)):</span><br><span class=\"line\"></span><br><span class=\"line\">            img_path = os.path.join(folder_path, img_name)</span><br><span class=\"line\">            img = cv2.imread(img_path, cv2.IMREAD_COLOR)</span><br><span class=\"line\"></span><br><span class=\"line\">            X.append(np.array(img))</span><br><span class=\"line\">            y.append(flower_type)</span><br><span class=\"line\">            </span><br><span class=\"line\">make_data()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将数据集分为训练集和测试集</span></span><br><span class=\"line\"><span class=\"comment\"># train_size表示训练集的比例</span></span><br><span class=\"line\"><span class=\"comment\"># 将stratify设为标签，使得每个类别都按比例进行训练/测试集的划分</span></span><br><span class=\"line\"><span class=\"comment\"># random_state设置随机数种子</span></span><br><span class=\"line\">X_train, X_test, y_train, y_test = train_test_split(X , y , train_size = <span class=\"number\">0.7</span> , stratify = y , random_state = <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分别生成训练集和测试集文件夹</span></span><br><span class=\"line\">num_dict = &#123;<span class=\"string\">&#x27;daisy&#x27;</span>:<span class=\"number\">1</span>, <span class=\"string\">&#x27;dandelion&#x27;</span>:<span class=\"number\">1</span>, <span class=\"string\">&#x27;rose&#x27;</span>:<span class=\"number\">1</span>, <span class=\"string\">&#x27;sunflower&#x27;</span>:<span class=\"number\">1</span>, <span class=\"string\">&#x27;tulip&#x27;</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(X_train))):</span><br><span class=\"line\">    cv2.imwrite(train_dir+y_train[i]+<span class=\"string\">&#x27;/&#x27;</span>+y_train[i]+<span class=\"string\">&#x27;-&#x27;</span>+<span class=\"built_in\">str</span>(num_dict[y_train[i]])+<span class=\"string\">&#x27;.jpg&#x27;</span>, X_train[i])</span><br><span class=\"line\">    num_dict[y_train[i]] += <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(X_test))):</span><br><span class=\"line\">    cv2.imwrite(test_dir+y_test[i]+<span class=\"string\">&#x27;/&#x27;</span>+y_test[i]+<span class=\"string\">&#x27;-&#x27;</span>+<span class=\"built_in\">str</span>(num_dict[y_test[i]])+<span class=\"string\">&#x27;.jpg&#x27;</span>, X_test[i])</span><br><span class=\"line\">    num_dict[y_test[i]] += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n","categories":["机器学习","深度学习"],"tags":["机器学习, 卷积网络, VGG, Pytorch, 图像分类"]},{"title":"生命 生存 生活 生命","url":"/2020/12/20/my-life/","content":"<p>0岁时，父母给了我生命；</p>\n<p>20岁之前，努力求学，以求生存；</p>\n<p>20岁~40岁，小有成就，优雅生活；</p>\n<p>40岁之后，追求信仰，实现生命的真正意义！</p>\n","categories":["思考"],"tags":["思考"]}]